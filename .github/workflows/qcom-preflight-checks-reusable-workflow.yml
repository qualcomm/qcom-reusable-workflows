name: Qualcomm Preflight Checks Reusable Workflow
on:
  workflow_call:
    inputs:
      repolinter:
        required: false
        type: boolean
        default: true
      semgrep: 
        required: false
        type: boolean
        default: true
      copyright-license-detector:
        required: false
        type: boolean
        default: true
      pr-check-emails:
        required: false
        type: boolean
        default: true
      dependency-review:
        required: false
        type: boolean
        default: true 
      base_ref:
        required: false
        type: string
      head_ref:
        required: false
        type: string   
    secrets:
      SEMGREP_APP_TOKEN:
        required: true
        
permissions:
  contents: read
  security-events: write
  
jobs:
  repolinter:
    if: ${{ inputs.repolinter }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Verify repolinter config file is present
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: "repolint.json"
      - name: Run Repolinter with local repolint.json
        if: steps.check_files.outputs.files_exists == 'true'
        uses: todogroup/repolinter-action@v1
        with:
          config_file: "repolint.json"
      - name: Run Repolinter with default ruleset
        if: steps.check_files.outputs.files_exists == 'false'
        uses: todogroup/repolinter-action@v1
        with:
          config_url: "https://raw.githubusercontent.com/qualcomm/.github/main/repolint.json"

  semgrep-static-analysis:
    if: ${{ ( inputs.semgrep && contains('pull_request_target', github.event_name) && github.event.action != 'closed' && github.actor != 'dependabot[bot]' ) }}
    name: semgrep/ci
    runs-on: ubuntu-latest

    container:
      image: semgrep/semgrep:1.125.0
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci --sarif-output=semgrep-report.sarif
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload SARIF file for GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-report.sarif
          category: semgrep-scan
  
  copyright-license-check:
    if: ${{ ( inputs.copyright-license-detector && contains('pull_request_target', github.event_name) && github.event.action != 'closed' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR head
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history so we can diff properly
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
 
      - name: Add PR base repo as remote and fetch it
        run: |
          git remote add upstream https://github.com/${{ github.event.pull_request.base.repo.full_name }}.git
          git fetch upstream
 
      - name: Generate final patch between base and head
        run: |
          git diff upstream/${{ github.event.pull_request.base.ref }} > pr.patch
          head -n 100 pr.patch

      - name: Run copyright/license detector
        uses: qualcomm/copyright-license-checker-action@v1.0.0
        with:
          patch_file: pr.patch
          repo_name: ${{ github.repository }}
  
  commit-emails-check:
    if: ${{ inputs.pr-check-emails }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check PR emails
        uses: qualcomm/commit-emails-check-action@v1.0.0

  dependency-review:
    if: ${{ inputs.dependency-review }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        with:
          base-ref: ${{ inputs.base_ref }}
          head-ref: ${{ inputs.head_ref }}
          fail-on-severity: high  
